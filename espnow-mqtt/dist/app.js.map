{"version":3,"sources":["app.js"],"names":["a","b","mqtt","require","client","connect","moment","checksum","message","calculatedSum","checkSum","length","i","v","console","log","toString","on","subscribe","topic","slice","statusObject","mac1","mac2","len","payload","type","name","mac1String","mac2String","val1","readUInt32LE","val2","val3","batt","myName","sensor","parseInt","updated","unix","updatedText","format","publish","retain","JSON","stringify"],"mappings":"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","file":"app.js","sourcesContent":["export default (a, b) => a + b\nconst mqtt = require('mqtt')\nconst client = mqtt.connect('mqtt://mqtt.cmmc.io')\nconst moment = require('moment')\n\nlet checksum = (message) => {\n  let calculatedSum = 0\n  let checkSum = message[message.length - 1]\n  for (let i = 0; i < message.length - 1; i++) {\n    let v = message[i]\n    calculatedSum ^= v\n  }\n  console.log(`calculated sum = ${calculatedSum.toString(16)}`)\n  console.log(`check sum = ${checkSum.toString(16)}`)\n  return calculatedSum === checkSum\n}\n\nclient.on('connect', function () {\n  client.subscribe('CMMC/espnow/#')\n})\n\nclient.on('message', function (topic, message) {\n  console.log('================')\n  if (message[message.length - 1] === 0x0d) {\n    message = message.slice(0, message.length - 1)\n  }\n\n  console.log(message)\n  console.log('================')\n  console.log(message.length)\n\n  let statusObject = {}\n  if (checksum(message)) {\n    let mac1, mac2\n    if (message[0] === 0xfc && message[1] === 0xfd) {\n      console.log(message)\n      mac1 = message.slice(2, 2 + 6)\n      mac2 = message.slice(2 + 6, 2 + 6 + 6)\n      let len = message[2 + 6 + 6]\n      let payload = message.slice(2 + 6 + 6 + 1, message.length - 1)\n      console.log(`len = ${len}, payload = ${payload.toString('hex')}`)\n      // if (checksum(payload)) {\n      //   console.log('YAY!')\n      // }\n      if (payload[0] === 0xff && payload[1] === 0xfa) {\n        let type = payload.slice(2, 5)\n        let name = payload.slice(5, 11)\n        let mac1String = mac1.toString('hex')\n        let mac2String = mac2.toString('hex')\n        let [val1, val2, val3, batt] = [\n          payload.readUInt32LE(11) || 0,\n          payload.readUInt32LE(15) || 0,\n          payload.readUInt32LE(19) || 0,\n          payload.readUInt32LE(23) || 0\n        ]\n\n        console.log(`type = `, type)\n        console.log(`name = `, name.toString())\n        console.log(`val1 = `, val1)\n        console.log(`val2 = `, val2)\n        console.log(`val3 = `, val3)\n        console.log(`batt = `, batt)\n        console.log(`[master] mac1 = `, mac1String)\n        console.log(`[ slave] mac2 = `, mac2String)\n\n        statusObject.myName = name.toString()\n        statusObject.type = type.toString('hex')\n        statusObject.sensor = type.toString('hex')\n        statusObject.val1 = parseInt(val1.toString())\n        statusObject.val2 = parseInt(val2.toString())\n        statusObject.val3 = parseInt(val3.toString())\n        statusObject.batt = parseInt(batt.toString())\n        statusObject.mac1 = mac1String\n        statusObject.mac2 = mac2String\n        statusObject.updated = moment().unix().toString()\n        statusObject.updatedText = moment().format('MMMM Do YYYY, h:mm:ss a')\n\n        client.publish(`CMMC/espnow/${mac1String}/${mac2String}/batt`, batt.toString(), {retain: true})\n        client.publish(`CMMC/espnow/${mac1String}/${mac2String}/status`, JSON.stringify(statusObject), {retain: true})\n        client.publish(`CMMC/espnow/${mac1String}/${name.toString()}/status`, JSON.stringify(statusObject), {retain: true})\n      } else {\n        console.log('invalid header')\n      }\n    }\n  } else {\n    console.log('invalid checksum')\n  }\n})\n\nconsole.log('started')\n"],"sourceRoot":"/Users/nat/espnow_serial_bridge/espnow-mqtt/dist"}